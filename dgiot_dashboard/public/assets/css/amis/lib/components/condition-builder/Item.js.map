{
    "version": 3,
    "file": "Item.js",
    "sourceRoot": "",
    "sources": [
        "/src/components/condition-builder/Item.tsx"
    ],
    "names": [],
    "mappings": "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",
    "sourcesContent": [
        "import React from 'react';\nimport {\n  Fields,\n  ConditionRule,\n  ConditionGroupValue,\n  Funcs,\n  ExpressionFunc,\n  Func,\n  Field,\n  FieldSimple,\n  ExpressionField,\n  OperatorType,\n  ExpressionComplex\n} from './types';\nimport {ThemeProps, themeable} from '../../theme';\nimport {Icon} from '../icons';\nimport {autobind, findTree, noop} from '../../utils/helper';\nimport Expression from './Expression';\nimport {Config, OperationMap} from './config';\nimport PopOverContainer from '../PopOverContainer';\nimport ListRadios from '../ListRadios';\nimport ResultBox from '../ResultBox';\nimport {localeable, LocaleProps} from '../../locale';\n\nconst option2value = (item: any) => item.value;\n\nexport interface ConditionItemProps extends ThemeProps, LocaleProps {\n  config: Config;\n  fields: Fields;\n  funcs?: Funcs;\n  index?: number;\n  value: ConditionRule;\n  data?: any;\n  disabled?: boolean;\n  searchable?: boolean;\n  onChange: (value: ConditionRule, index?: number) => void;\n  fieldClassName?: string;\n}\n\nexport class ConditionItem extends React.Component<ConditionItemProps> {\n  @autobind\n  handleLeftFieldSelect(field: any) {\n    const value = {...this.props.value};\n    const onChange = this.props.onChange;\n    value.left = field;\n    onChange(value, this.props.index);\n  }\n\n  @autobind\n  handleLeftInputTypeChange(type: 'func' | 'field') {\n    const value = {...this.props.value};\n    const onChange = this.props.onChange;\n\n    if (type === 'func') {\n      value.left = {type: 'func'};\n    } else {\n      value.left = '';\n    }\n\n    onChange(value, this.props.index);\n  }\n\n  @autobind\n  handleLeftChange(leftValue: any) {\n    const value = {\n      ...this.props.value,\n      left: leftValue,\n      op: undefined,\n      right: undefined\n    };\n    const onChange = this.props.onChange;\n\n    onChange(value, this.props.index);\n  }\n\n  @autobind\n  handleOperatorChange(op: OperatorType) {\n    const value = {...this.props.value, op: op, right: undefined};\n    this.props.onChange(value, this.props.index);\n  }\n\n  @autobind\n  handleRightChange(rightValue: any) {\n    const value = {...this.props.value, right: rightValue};\n    const onChange = this.props.onChange;\n\n    onChange(value, this.props.index);\n  }\n\n  handleRightSubChange(index: number, rightValue: any) {\n    const origin = Array.isArray(this.props.value?.right)\n      ? this.props.value.right.concat()\n      : [];\n\n    origin[index] = rightValue;\n    const value = {...this.props.value, right: origin};\n    const onChange = this.props.onChange;\n\n    onChange(value, this.props.index);\n  }\n\n  renderLeft() {\n    const {\n      value,\n      fields,\n      funcs,\n      config,\n      disabled,\n      fieldClassName,\n      searchable\n    } = this.props;\n    return (\n      <Expression\n        config={config}\n        funcs={funcs}\n        value={value.left}\n        fieldClassName={fieldClassName}\n        onChange={this.handleLeftChange}\n        fields={fields}\n        disabled={disabled}\n        searchable={searchable}\n        allowedTypes={\n          ['field', 'func'].filter(\n            type => type === 'field' || type === 'func'\n          ) as any\n        }\n      />\n    );\n  }\n\n  renderOperator() {\n    const {funcs, config, fields, value, classnames: cx, disabled} = this.props;\n    const left = value?.left;\n    let operators: Array<string> = [];\n\n    if ((left as ExpressionFunc)?.type === 'func') {\n      const func: Func = findTree(\n        funcs!,\n        (i: Func) => i.type === (left as ExpressionFunc).func\n      ) as Func;\n\n      if (func) {\n        operators = config.types[func.returnType]?.operators;\n      }\n    } else if ((left as ExpressionField)?.type === 'field') {\n      const field: FieldSimple = findTree(\n        fields,\n        (i: FieldSimple) => i.name === (left as ExpressionField).field\n      ) as FieldSimple;\n\n      if (field) {\n        operators = field.operators || config.types[field.type]?.operators;\n      }\n    }\n\n    if (Array.isArray(operators) && operators.length) {\n      const __ = this.props.translate;\n      return (\n        <PopOverContainer\n          popOverRender={({onClose}) => (\n            <ListRadios\n              onClick={onClose}\n              option2value={option2value}\n              onChange={this.handleOperatorChange}\n              options={operators.map(operator => ({\n                label: __(OperationMap[operator as keyof typeof OperationMap]),\n                value: operator\n              }))}\n              value={value.op}\n              showRadio={false}\n            />\n          )}\n        >\n          {({onClick, isOpened, ref}) => (\n            <div className={cx('CBGroup-operator')}>\n              <ResultBox\n                className={cx(\n                  'CBGroup-operatorInput',\n                  isOpened ? 'is-active' : ''\n                )}\n                ref={ref}\n                allowInput={false}\n                result={__(\n                  OperationMap[value?.op as keyof typeof OperationMap]\n                )}\n                onResultChange={noop}\n                onResultClick={onClick}\n                disabled={disabled}\n                placeholder={__('Condition.cond_placeholder')}\n              >\n                <span className={cx('CBGroup-operatorCaret')}>\n                  <Icon icon=\"caret\" className=\"icon\" />\n                </span>\n              </ResultBox>\n            </div>\n          )}\n        </PopOverContainer>\n      );\n    }\n\n    return null;\n  }\n\n  renderRight() {\n    const {value, funcs, fields} = this.props;\n\n    if (!value?.op) {\n      return null;\n    }\n\n    const left = value?.left;\n    let leftType = '';\n\n    if ((left as ExpressionFunc)?.type === 'func') {\n      const func: Func = findTree(\n        funcs!,\n        (i: Func) => i.type === (left as ExpressionFunc).func\n      ) as Func;\n\n      if (func) {\n        leftType = func.returnType;\n      }\n    } else if ((left as ExpressionField)?.type === 'field') {\n      const field: FieldSimple = findTree(\n        fields,\n        (i: FieldSimple) => i.name === (left as ExpressionField).field\n      ) as FieldSimple;\n\n      if (field) {\n        leftType = field.type;\n      }\n    }\n\n    if (leftType) {\n      return this.renderRightWidgets(leftType, value.op!);\n    }\n\n    return null;\n  }\n\n  renderRightWidgets(type: string, op: OperatorType) {\n    const {\n      funcs,\n      value,\n      data,\n      fields,\n      config,\n      classnames: cx,\n      disabled\n    } = this.props;\n    let field = {\n      ...config.types[type],\n      type\n    } as FieldSimple;\n\n    if ((value?.left as ExpressionField)?.type === 'field') {\n      const leftField: FieldSimple = findTree(\n        fields,\n        (i: FieldSimple) => i.name === (value?.left as ExpressionField).field\n      ) as FieldSimple;\n\n      if (leftField) {\n        field = {\n          ...field,\n          ...leftField\n        };\n      }\n    }\n\n    if (op === 'is_empty' || op === 'is_not_empty') {\n      return null;\n    } else if (op === 'between' || op === 'not_between') {\n      return (\n        <>\n          <Expression\n            config={config}\n            funcs={funcs}\n            valueField={field}\n            value={(value.right as Array<ExpressionComplex>)?.[0]}\n            data={data}\n            onChange={this.handleRightSubChange.bind(this, 0)}\n            fields={fields}\n            allowedTypes={\n              field?.valueTypes ||\n              config.valueTypes || ['value', 'field', 'func', 'formula']\n            }\n            disabled={disabled}\n          />\n\n          <span className={cx('CBSeprator')}>~</span>\n\n          <Expression\n            config={config}\n            funcs={funcs}\n            valueField={field}\n            value={(value.right as Array<ExpressionComplex>)?.[1]}\n            data={data}\n            onChange={this.handleRightSubChange.bind(this, 1)}\n            fields={fields}\n            allowedTypes={\n              field?.valueTypes ||\n              config.valueTypes || ['value', 'field', 'func', 'formula']\n            }\n            disabled={disabled}\n          />\n        </>\n      );\n    }\n\n    return (\n      <Expression\n        config={config}\n        op={op}\n        funcs={funcs}\n        valueField={field}\n        value={value.right}\n        data={data}\n        onChange={this.handleRightChange}\n        fields={fields}\n        allowedTypes={\n          field?.valueTypes ||\n          config.valueTypes || ['value', 'field', 'func', 'formula']\n        }\n        disabled={disabled}\n      />\n    );\n  }\n\n  render() {\n    const {classnames: cx} = this.props;\n\n    return (\n      <div className={cx('CBItem')}>\n        {this.renderLeft()}\n        {this.renderOperator()}\n        {this.renderRight()}\n      </div>\n    );\n  }\n}\n\nexport default themeable(localeable(ConditionItem));\n"
    ]
}